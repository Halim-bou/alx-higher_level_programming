======================
add inetger functions
======================

Using ''add_integer(a, b=98)''
----------------------

This function return an integer result of add of a and b''add_integer''

::

>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(10, 23)
33

the function can add positive and negative number

::

>>> add_integer(10, -5)
5
>>> add_integer(-4, 2)
-2
>>> add_integer(-5, -5)
-10

the function can add two float numbers

::

>>> add_integer(5.5, 4.5)
9

the function can add positive or negetive fload numbers.

::

>>> add_integer(-4.5, -8.3)
-12
>>> add_integer(-2.0, 5.1)
3
>>> add_integer(5.1, -2.0)
3

the fuction can work with one argument passing

::

>>> add_integer(5)
103
>>> add_integer(-10)
88

The ''add_integer(a, b=98)'' can work only if we pass an integer or float number.
if none integer or float passed it will raise typeerror.

::

>>> add_integer("halim")
Traceback (most recent call last):
TypeError: a must be an integer

::

>>> add_integer(98, "halim")
Traceback (most recent call last):
TypeError: b must be an integer

::

>>> add_integer("halim", "hanaf")
Traceback (most recent call last):
TypeError: a must be an integer

::

>>> add_integer(None)
Traceback (most recent call last):
TypeError: a must be an integer

::

>>> add_integer(98, None)
Traceback (most recent call last):
TypeError: b must be an integer

::

>>> add_integer(float('nan'))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer

::

>>> add_integer(98, float('nan'))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer

::

>>> add_integer(float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

::

>>> add_integer(98, float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

======================================================
